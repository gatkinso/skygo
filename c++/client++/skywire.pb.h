// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skywire.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_skywire_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_skywire_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_skywire_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_skywire_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skywire_2eproto;
namespace skywire {
class Member;
class MemberDefaultTypeInternal;
extern MemberDefaultTypeInternal _Member_default_instance_;
class RequestMetadata;
class RequestMetadataDefaultTypeInternal;
extern RequestMetadataDefaultTypeInternal _RequestMetadata_default_instance_;
class SkywireRequest;
class SkywireRequestDefaultTypeInternal;
extern SkywireRequestDefaultTypeInternal _SkywireRequest_default_instance_;
class SkywireResponse;
class SkywireResponseDefaultTypeInternal;
extern SkywireResponseDefaultTypeInternal _SkywireResponse_default_instance_;
class Stencil;
class StencilDefaultTypeInternal;
extern StencilDefaultTypeInternal _Stencil_default_instance_;
class Stencil_MembersEntry_DoNotUse;
class Stencil_MembersEntry_DoNotUseDefaultTypeInternal;
extern Stencil_MembersEntry_DoNotUseDefaultTypeInternal _Stencil_MembersEntry_DoNotUse_default_instance_;
class Stencil_StringValuesEntry_DoNotUse;
class Stencil_StringValuesEntry_DoNotUseDefaultTypeInternal;
extern Stencil_StringValuesEntry_DoNotUseDefaultTypeInternal _Stencil_StringValuesEntry_DoNotUse_default_instance_;
}  // namespace skywire
PROTOBUF_NAMESPACE_OPEN
template<> ::skywire::Member* Arena::CreateMaybeMessage<::skywire::Member>(Arena*);
template<> ::skywire::RequestMetadata* Arena::CreateMaybeMessage<::skywire::RequestMetadata>(Arena*);
template<> ::skywire::SkywireRequest* Arena::CreateMaybeMessage<::skywire::SkywireRequest>(Arena*);
template<> ::skywire::SkywireResponse* Arena::CreateMaybeMessage<::skywire::SkywireResponse>(Arena*);
template<> ::skywire::Stencil* Arena::CreateMaybeMessage<::skywire::Stencil>(Arena*);
template<> ::skywire::Stencil_MembersEntry_DoNotUse* Arena::CreateMaybeMessage<::skywire::Stencil_MembersEntry_DoNotUse>(Arena*);
template<> ::skywire::Stencil_StringValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::skywire::Stencil_StringValuesEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace skywire {

// ===================================================================

class Member :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:skywire.Member) */ {
 public:
  Member();
  virtual ~Member();

  Member(const Member& from);
  Member(Member&& from) noexcept
    : Member() {
    *this = ::std::move(from);
  }

  inline Member& operator=(const Member& from) {
    CopyFrom(from);
    return *this;
  }
  inline Member& operator=(Member&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Member& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Member* internal_default_instance() {
    return reinterpret_cast<const Member*>(
               &_Member_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Member* other);
  friend void swap(Member& a, Member& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Member* New() const final {
    return CreateMaybeMessage<Member>(nullptr);
  }

  Member* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Member>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Member& from);
  void MergeFrom(const Member& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Member* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "skywire.Member";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_skywire_2eproto);
    return ::descriptor_table_skywire_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string type = 10;
  void clear_type();
  static const int kTypeFieldNumber = 10;
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);

  // string name = 20;
  void clear_name();
  static const int kNameFieldNumber = 20;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // uint32 endian = 30;
  void clear_endian();
  static const int kEndianFieldNumber = 30;
  ::PROTOBUF_NAMESPACE_ID::uint32 endian() const;
  void set_endian(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:skywire.Member)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 endian_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skywire_2eproto;
};
// -------------------------------------------------------------------

class Stencil_StringValuesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Stencil_StringValuesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Stencil_StringValuesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Stencil_StringValuesEntry_DoNotUse();
  Stencil_StringValuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Stencil_StringValuesEntry_DoNotUse& other);
  static const Stencil_StringValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Stencil_StringValuesEntry_DoNotUse*>(&_Stencil_StringValuesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "skywire.Stencil.StringValuesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "skywire.Stencil.StringValuesEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_skywire_2eproto);
    return ::descriptor_table_skywire_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class Stencil_MembersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Stencil_MembersEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::skywire::Member,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Stencil_MembersEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::skywire::Member,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Stencil_MembersEntry_DoNotUse();
  Stencil_MembersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Stencil_MembersEntry_DoNotUse& other);
  static const Stencil_MembersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Stencil_MembersEntry_DoNotUse*>(&_Stencil_MembersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_skywire_2eproto);
    return ::descriptor_table_skywire_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class Stencil :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:skywire.Stencil) */ {
 public:
  Stencil();
  virtual ~Stencil();

  Stencil(const Stencil& from);
  Stencil(Stencil&& from) noexcept
    : Stencil() {
    *this = ::std::move(from);
  }

  inline Stencil& operator=(const Stencil& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stencil& operator=(Stencil&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Stencil& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Stencil* internal_default_instance() {
    return reinterpret_cast<const Stencil*>(
               &_Stencil_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Stencil* other);
  friend void swap(Stencil& a, Stencil& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Stencil* New() const final {
    return CreateMaybeMessage<Stencil>(nullptr);
  }

  Stencil* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Stencil>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Stencil& from);
  void MergeFrom(const Stencil& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stencil* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "skywire.Stencil";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_skywire_2eproto);
    return ::descriptor_table_skywire_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> string_values = 10;
  int string_values_size() const;
  void clear_string_values();
  static const int kStringValuesFieldNumber = 10;
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      string_values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_string_values();

  // map<uint32, .skywire.Member> members = 40;
  int members_size() const;
  void clear_members();
  static const int kMembersFieldNumber = 40;
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::skywire::Member >&
      members() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::skywire::Member >*
      mutable_members();

  // repeated string includes = 100;
  int includes_size() const;
  void clear_includes();
  static const int kIncludesFieldNumber = 100;
  const std::string& includes(int index) const;
  std::string* mutable_includes(int index);
  void set_includes(int index, const std::string& value);
  void set_includes(int index, std::string&& value);
  void set_includes(int index, const char* value);
  void set_includes(int index, const char* value, size_t size);
  std::string* add_includes();
  void add_includes(const std::string& value);
  void add_includes(std::string&& value);
  void add_includes(const char* value);
  void add_includes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& includes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_includes();

  // repeated string native_types = 101;
  int native_types_size() const;
  void clear_native_types();
  static const int kNativeTypesFieldNumber = 101;
  const std::string& native_types(int index) const;
  std::string* mutable_native_types(int index);
  void set_native_types(int index, const std::string& value);
  void set_native_types(int index, std::string&& value);
  void set_native_types(int index, const char* value);
  void set_native_types(int index, const char* value, size_t size);
  std::string* add_native_types();
  void add_native_types(const std::string& value);
  void add_native_types(std::string&& value);
  void add_native_types(const char* value);
  void add_native_types(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& native_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_native_types();

  // @@protoc_insertion_point(class_scope:skywire.Stencil)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Stencil_StringValuesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > string_values_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Stencil_MembersEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, ::skywire::Member,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > members_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> includes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> native_types_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skywire_2eproto;
};
// -------------------------------------------------------------------

class RequestMetadata :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:skywire.RequestMetadata) */ {
 public:
  RequestMetadata();
  virtual ~RequestMetadata();

  RequestMetadata(const RequestMetadata& from);
  RequestMetadata(RequestMetadata&& from) noexcept
    : RequestMetadata() {
    *this = ::std::move(from);
  }

  inline RequestMetadata& operator=(const RequestMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestMetadata& operator=(RequestMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestMetadata* internal_default_instance() {
    return reinterpret_cast<const RequestMetadata*>(
               &_RequestMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(RequestMetadata* other);
  friend void swap(RequestMetadata& a, RequestMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestMetadata* New() const final {
    return CreateMaybeMessage<RequestMetadata>(nullptr);
  }

  RequestMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestMetadata& from);
  void MergeFrom(const RequestMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "skywire.RequestMetadata";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_skywire_2eproto);
    return ::descriptor_table_skywire_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool generate_tests = 20;
  void clear_generate_tests();
  static const int kGenerateTestsFieldNumber = 20;
  bool generate_tests() const;
  void set_generate_tests(bool value);

  // uint64 id = 10;
  void clear_id();
  static const int kIdFieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:skywire.RequestMetadata)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool generate_tests_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skywire_2eproto;
};
// -------------------------------------------------------------------

class SkywireRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:skywire.SkywireRequest) */ {
 public:
  SkywireRequest();
  virtual ~SkywireRequest();

  SkywireRequest(const SkywireRequest& from);
  SkywireRequest(SkywireRequest&& from) noexcept
    : SkywireRequest() {
    *this = ::std::move(from);
  }

  inline SkywireRequest& operator=(const SkywireRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SkywireRequest& operator=(SkywireRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SkywireRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SkywireRequest* internal_default_instance() {
    return reinterpret_cast<const SkywireRequest*>(
               &_SkywireRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(SkywireRequest* other);
  friend void swap(SkywireRequest& a, SkywireRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SkywireRequest* New() const final {
    return CreateMaybeMessage<SkywireRequest>(nullptr);
  }

  SkywireRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SkywireRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SkywireRequest& from);
  void MergeFrom(const SkywireRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SkywireRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "skywire.SkywireRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_skywire_2eproto);
    return ::descriptor_table_skywire_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .skywire.RequestMetadata meta = 10;
  bool has_meta() const;
  void clear_meta();
  static const int kMetaFieldNumber = 10;
  const ::skywire::RequestMetadata& meta() const;
  ::skywire::RequestMetadata* release_meta();
  ::skywire::RequestMetadata* mutable_meta();
  void set_allocated_meta(::skywire::RequestMetadata* meta);

  // .skywire.Stencil msg_spec = 100;
  bool has_msg_spec() const;
  void clear_msg_spec();
  static const int kMsgSpecFieldNumber = 100;
  const ::skywire::Stencil& msg_spec() const;
  ::skywire::Stencil* release_msg_spec();
  ::skywire::Stencil* mutable_msg_spec();
  void set_allocated_msg_spec(::skywire::Stencil* msg_spec);

  // .skywire.Stencil lang_spec = 110;
  bool has_lang_spec() const;
  void clear_lang_spec();
  static const int kLangSpecFieldNumber = 110;
  const ::skywire::Stencil& lang_spec() const;
  ::skywire::Stencil* release_lang_spec();
  ::skywire::Stencil* mutable_lang_spec();
  void set_allocated_lang_spec(::skywire::Stencil* lang_spec);

  // @@protoc_insertion_point(class_scope:skywire.SkywireRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::skywire::RequestMetadata* meta_;
  ::skywire::Stencil* msg_spec_;
  ::skywire::Stencil* lang_spec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skywire_2eproto;
};
// -------------------------------------------------------------------

class SkywireResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:skywire.SkywireResponse) */ {
 public:
  SkywireResponse();
  virtual ~SkywireResponse();

  SkywireResponse(const SkywireResponse& from);
  SkywireResponse(SkywireResponse&& from) noexcept
    : SkywireResponse() {
    *this = ::std::move(from);
  }

  inline SkywireResponse& operator=(const SkywireResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SkywireResponse& operator=(SkywireResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SkywireResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SkywireResponse* internal_default_instance() {
    return reinterpret_cast<const SkywireResponse*>(
               &_SkywireResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(SkywireResponse* other);
  friend void swap(SkywireResponse& a, SkywireResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SkywireResponse* New() const final {
    return CreateMaybeMessage<SkywireResponse>(nullptr);
  }

  SkywireResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SkywireResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SkywireResponse& from);
  void MergeFrom(const SkywireResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SkywireResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "skywire.SkywireResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_skywire_2eproto);
    return ::descriptor_table_skywire_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string impl = 100;
  void clear_impl();
  static const int kImplFieldNumber = 100;
  const std::string& impl() const;
  void set_impl(const std::string& value);
  void set_impl(std::string&& value);
  void set_impl(const char* value);
  void set_impl(const char* value, size_t size);
  std::string* mutable_impl();
  std::string* release_impl();
  void set_allocated_impl(std::string* impl);

  // string header = 120;
  void clear_header();
  static const int kHeaderFieldNumber = 120;
  const std::string& header() const;
  void set_header(const std::string& value);
  void set_header(std::string&& value);
  void set_header(const char* value);
  void set_header(const char* value, size_t size);
  std::string* mutable_header();
  std::string* release_header();
  void set_allocated_header(std::string* header);

  // string test = 130;
  void clear_test();
  static const int kTestFieldNumber = 130;
  const std::string& test() const;
  void set_test(const std::string& value);
  void set_test(std::string&& value);
  void set_test(const char* value);
  void set_test(const char* value, size_t size);
  std::string* mutable_test();
  std::string* release_test();
  void set_allocated_test(std::string* test);

  // .skywire.RequestMetadata meta = 10;
  bool has_meta() const;
  void clear_meta();
  static const int kMetaFieldNumber = 10;
  const ::skywire::RequestMetadata& meta() const;
  ::skywire::RequestMetadata* release_meta();
  ::skywire::RequestMetadata* mutable_meta();
  void set_allocated_meta(::skywire::RequestMetadata* meta);

  // @@protoc_insertion_point(class_scope:skywire.SkywireResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr impl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr header_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr test_;
  ::skywire::RequestMetadata* meta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skywire_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Member

// string type = 10;
inline void Member::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Member::type() const {
  // @@protoc_insertion_point(field_get:skywire.Member.type)
  return type_.GetNoArena();
}
inline void Member::set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:skywire.Member.type)
}
inline void Member::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:skywire.Member.type)
}
inline void Member::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:skywire.Member.type)
}
inline void Member::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:skywire.Member.type)
}
inline std::string* Member::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:skywire.Member.type)
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Member::release_type() {
  // @@protoc_insertion_point(field_release:skywire.Member.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Member::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:skywire.Member.type)
}

// string name = 20;
inline void Member::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Member::name() const {
  // @@protoc_insertion_point(field_get:skywire.Member.name)
  return name_.GetNoArena();
}
inline void Member::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:skywire.Member.name)
}
inline void Member::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:skywire.Member.name)
}
inline void Member::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:skywire.Member.name)
}
inline void Member::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:skywire.Member.name)
}
inline std::string* Member::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:skywire.Member.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Member::release_name() {
  // @@protoc_insertion_point(field_release:skywire.Member.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Member::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:skywire.Member.name)
}

// uint32 endian = 30;
inline void Member::clear_endian() {
  endian_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Member::endian() const {
  // @@protoc_insertion_point(field_get:skywire.Member.endian)
  return endian_;
}
inline void Member::set_endian(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  endian_ = value;
  // @@protoc_insertion_point(field_set:skywire.Member.endian)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Stencil

// map<string, string> string_values = 10;
inline int Stencil::string_values_size() const {
  return string_values_.size();
}
inline void Stencil::clear_string_values() {
  string_values_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Stencil::string_values() const {
  // @@protoc_insertion_point(field_map:skywire.Stencil.string_values)
  return string_values_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Stencil::mutable_string_values() {
  // @@protoc_insertion_point(field_mutable_map:skywire.Stencil.string_values)
  return string_values_.MutableMap();
}

// map<uint32, .skywire.Member> members = 40;
inline int Stencil::members_size() const {
  return members_.size();
}
inline void Stencil::clear_members() {
  members_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::skywire::Member >&
Stencil::members() const {
  // @@protoc_insertion_point(field_map:skywire.Stencil.members)
  return members_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::skywire::Member >*
Stencil::mutable_members() {
  // @@protoc_insertion_point(field_mutable_map:skywire.Stencil.members)
  return members_.MutableMap();
}

// repeated string includes = 100;
inline int Stencil::includes_size() const {
  return includes_.size();
}
inline void Stencil::clear_includes() {
  includes_.Clear();
}
inline const std::string& Stencil::includes(int index) const {
  // @@protoc_insertion_point(field_get:skywire.Stencil.includes)
  return includes_.Get(index);
}
inline std::string* Stencil::mutable_includes(int index) {
  // @@protoc_insertion_point(field_mutable:skywire.Stencil.includes)
  return includes_.Mutable(index);
}
inline void Stencil::set_includes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:skywire.Stencil.includes)
  includes_.Mutable(index)->assign(value);
}
inline void Stencil::set_includes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:skywire.Stencil.includes)
  includes_.Mutable(index)->assign(std::move(value));
}
inline void Stencil::set_includes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  includes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:skywire.Stencil.includes)
}
inline void Stencil::set_includes(int index, const char* value, size_t size) {
  includes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:skywire.Stencil.includes)
}
inline std::string* Stencil::add_includes() {
  // @@protoc_insertion_point(field_add_mutable:skywire.Stencil.includes)
  return includes_.Add();
}
inline void Stencil::add_includes(const std::string& value) {
  includes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:skywire.Stencil.includes)
}
inline void Stencil::add_includes(std::string&& value) {
  includes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:skywire.Stencil.includes)
}
inline void Stencil::add_includes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  includes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:skywire.Stencil.includes)
}
inline void Stencil::add_includes(const char* value, size_t size) {
  includes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:skywire.Stencil.includes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Stencil::includes() const {
  // @@protoc_insertion_point(field_list:skywire.Stencil.includes)
  return includes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Stencil::mutable_includes() {
  // @@protoc_insertion_point(field_mutable_list:skywire.Stencil.includes)
  return &includes_;
}

// repeated string native_types = 101;
inline int Stencil::native_types_size() const {
  return native_types_.size();
}
inline void Stencil::clear_native_types() {
  native_types_.Clear();
}
inline const std::string& Stencil::native_types(int index) const {
  // @@protoc_insertion_point(field_get:skywire.Stencil.native_types)
  return native_types_.Get(index);
}
inline std::string* Stencil::mutable_native_types(int index) {
  // @@protoc_insertion_point(field_mutable:skywire.Stencil.native_types)
  return native_types_.Mutable(index);
}
inline void Stencil::set_native_types(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:skywire.Stencil.native_types)
  native_types_.Mutable(index)->assign(value);
}
inline void Stencil::set_native_types(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:skywire.Stencil.native_types)
  native_types_.Mutable(index)->assign(std::move(value));
}
inline void Stencil::set_native_types(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  native_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:skywire.Stencil.native_types)
}
inline void Stencil::set_native_types(int index, const char* value, size_t size) {
  native_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:skywire.Stencil.native_types)
}
inline std::string* Stencil::add_native_types() {
  // @@protoc_insertion_point(field_add_mutable:skywire.Stencil.native_types)
  return native_types_.Add();
}
inline void Stencil::add_native_types(const std::string& value) {
  native_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:skywire.Stencil.native_types)
}
inline void Stencil::add_native_types(std::string&& value) {
  native_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:skywire.Stencil.native_types)
}
inline void Stencil::add_native_types(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  native_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:skywire.Stencil.native_types)
}
inline void Stencil::add_native_types(const char* value, size_t size) {
  native_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:skywire.Stencil.native_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Stencil::native_types() const {
  // @@protoc_insertion_point(field_list:skywire.Stencil.native_types)
  return native_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Stencil::mutable_native_types() {
  // @@protoc_insertion_point(field_mutable_list:skywire.Stencil.native_types)
  return &native_types_;
}

// -------------------------------------------------------------------

// RequestMetadata

// uint64 id = 10;
inline void RequestMetadata::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestMetadata::id() const {
  // @@protoc_insertion_point(field_get:skywire.RequestMetadata.id)
  return id_;
}
inline void RequestMetadata::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:skywire.RequestMetadata.id)
}

// bool generate_tests = 20;
inline void RequestMetadata::clear_generate_tests() {
  generate_tests_ = false;
}
inline bool RequestMetadata::generate_tests() const {
  // @@protoc_insertion_point(field_get:skywire.RequestMetadata.generate_tests)
  return generate_tests_;
}
inline void RequestMetadata::set_generate_tests(bool value) {
  
  generate_tests_ = value;
  // @@protoc_insertion_point(field_set:skywire.RequestMetadata.generate_tests)
}

// -------------------------------------------------------------------

// SkywireRequest

// .skywire.RequestMetadata meta = 10;
inline bool SkywireRequest::has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline void SkywireRequest::clear_meta() {
  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
inline const ::skywire::RequestMetadata& SkywireRequest::meta() const {
  const ::skywire::RequestMetadata* p = meta_;
  // @@protoc_insertion_point(field_get:skywire.SkywireRequest.meta)
  return p != nullptr ? *p : *reinterpret_cast<const ::skywire::RequestMetadata*>(
      &::skywire::_RequestMetadata_default_instance_);
}
inline ::skywire::RequestMetadata* SkywireRequest::release_meta() {
  // @@protoc_insertion_point(field_release:skywire.SkywireRequest.meta)
  
  ::skywire::RequestMetadata* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::skywire::RequestMetadata* SkywireRequest::mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::skywire::RequestMetadata>(GetArenaNoVirtual());
    meta_ = p;
  }
  // @@protoc_insertion_point(field_mutable:skywire.SkywireRequest.meta)
  return meta_;
}
inline void SkywireRequest::set_allocated_meta(::skywire::RequestMetadata* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete meta_;
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:skywire.SkywireRequest.meta)
}

// .skywire.Stencil msg_spec = 100;
inline bool SkywireRequest::has_msg_spec() const {
  return this != internal_default_instance() && msg_spec_ != nullptr;
}
inline void SkywireRequest::clear_msg_spec() {
  if (GetArenaNoVirtual() == nullptr && msg_spec_ != nullptr) {
    delete msg_spec_;
  }
  msg_spec_ = nullptr;
}
inline const ::skywire::Stencil& SkywireRequest::msg_spec() const {
  const ::skywire::Stencil* p = msg_spec_;
  // @@protoc_insertion_point(field_get:skywire.SkywireRequest.msg_spec)
  return p != nullptr ? *p : *reinterpret_cast<const ::skywire::Stencil*>(
      &::skywire::_Stencil_default_instance_);
}
inline ::skywire::Stencil* SkywireRequest::release_msg_spec() {
  // @@protoc_insertion_point(field_release:skywire.SkywireRequest.msg_spec)
  
  ::skywire::Stencil* temp = msg_spec_;
  msg_spec_ = nullptr;
  return temp;
}
inline ::skywire::Stencil* SkywireRequest::mutable_msg_spec() {
  
  if (msg_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::skywire::Stencil>(GetArenaNoVirtual());
    msg_spec_ = p;
  }
  // @@protoc_insertion_point(field_mutable:skywire.SkywireRequest.msg_spec)
  return msg_spec_;
}
inline void SkywireRequest::set_allocated_msg_spec(::skywire::Stencil* msg_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_spec_;
  }
  if (msg_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_spec, submessage_arena);
    }
    
  } else {
    
  }
  msg_spec_ = msg_spec;
  // @@protoc_insertion_point(field_set_allocated:skywire.SkywireRequest.msg_spec)
}

// .skywire.Stencil lang_spec = 110;
inline bool SkywireRequest::has_lang_spec() const {
  return this != internal_default_instance() && lang_spec_ != nullptr;
}
inline void SkywireRequest::clear_lang_spec() {
  if (GetArenaNoVirtual() == nullptr && lang_spec_ != nullptr) {
    delete lang_spec_;
  }
  lang_spec_ = nullptr;
}
inline const ::skywire::Stencil& SkywireRequest::lang_spec() const {
  const ::skywire::Stencil* p = lang_spec_;
  // @@protoc_insertion_point(field_get:skywire.SkywireRequest.lang_spec)
  return p != nullptr ? *p : *reinterpret_cast<const ::skywire::Stencil*>(
      &::skywire::_Stencil_default_instance_);
}
inline ::skywire::Stencil* SkywireRequest::release_lang_spec() {
  // @@protoc_insertion_point(field_release:skywire.SkywireRequest.lang_spec)
  
  ::skywire::Stencil* temp = lang_spec_;
  lang_spec_ = nullptr;
  return temp;
}
inline ::skywire::Stencil* SkywireRequest::mutable_lang_spec() {
  
  if (lang_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::skywire::Stencil>(GetArenaNoVirtual());
    lang_spec_ = p;
  }
  // @@protoc_insertion_point(field_mutable:skywire.SkywireRequest.lang_spec)
  return lang_spec_;
}
inline void SkywireRequest::set_allocated_lang_spec(::skywire::Stencil* lang_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lang_spec_;
  }
  if (lang_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lang_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lang_spec, submessage_arena);
    }
    
  } else {
    
  }
  lang_spec_ = lang_spec;
  // @@protoc_insertion_point(field_set_allocated:skywire.SkywireRequest.lang_spec)
}

// -------------------------------------------------------------------

// SkywireResponse

// .skywire.RequestMetadata meta = 10;
inline bool SkywireResponse::has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline void SkywireResponse::clear_meta() {
  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
inline const ::skywire::RequestMetadata& SkywireResponse::meta() const {
  const ::skywire::RequestMetadata* p = meta_;
  // @@protoc_insertion_point(field_get:skywire.SkywireResponse.meta)
  return p != nullptr ? *p : *reinterpret_cast<const ::skywire::RequestMetadata*>(
      &::skywire::_RequestMetadata_default_instance_);
}
inline ::skywire::RequestMetadata* SkywireResponse::release_meta() {
  // @@protoc_insertion_point(field_release:skywire.SkywireResponse.meta)
  
  ::skywire::RequestMetadata* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::skywire::RequestMetadata* SkywireResponse::mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::skywire::RequestMetadata>(GetArenaNoVirtual());
    meta_ = p;
  }
  // @@protoc_insertion_point(field_mutable:skywire.SkywireResponse.meta)
  return meta_;
}
inline void SkywireResponse::set_allocated_meta(::skywire::RequestMetadata* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete meta_;
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:skywire.SkywireResponse.meta)
}

// string impl = 100;
inline void SkywireResponse::clear_impl() {
  impl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SkywireResponse::impl() const {
  // @@protoc_insertion_point(field_get:skywire.SkywireResponse.impl)
  return impl_.GetNoArena();
}
inline void SkywireResponse::set_impl(const std::string& value) {
  
  impl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:skywire.SkywireResponse.impl)
}
inline void SkywireResponse::set_impl(std::string&& value) {
  
  impl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:skywire.SkywireResponse.impl)
}
inline void SkywireResponse::set_impl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  impl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:skywire.SkywireResponse.impl)
}
inline void SkywireResponse::set_impl(const char* value, size_t size) {
  
  impl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:skywire.SkywireResponse.impl)
}
inline std::string* SkywireResponse::mutable_impl() {
  
  // @@protoc_insertion_point(field_mutable:skywire.SkywireResponse.impl)
  return impl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SkywireResponse::release_impl() {
  // @@protoc_insertion_point(field_release:skywire.SkywireResponse.impl)
  
  return impl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SkywireResponse::set_allocated_impl(std::string* impl) {
  if (impl != nullptr) {
    
  } else {
    
  }
  impl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), impl);
  // @@protoc_insertion_point(field_set_allocated:skywire.SkywireResponse.impl)
}

// string header = 120;
inline void SkywireResponse::clear_header() {
  header_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SkywireResponse::header() const {
  // @@protoc_insertion_point(field_get:skywire.SkywireResponse.header)
  return header_.GetNoArena();
}
inline void SkywireResponse::set_header(const std::string& value) {
  
  header_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:skywire.SkywireResponse.header)
}
inline void SkywireResponse::set_header(std::string&& value) {
  
  header_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:skywire.SkywireResponse.header)
}
inline void SkywireResponse::set_header(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  header_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:skywire.SkywireResponse.header)
}
inline void SkywireResponse::set_header(const char* value, size_t size) {
  
  header_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:skywire.SkywireResponse.header)
}
inline std::string* SkywireResponse::mutable_header() {
  
  // @@protoc_insertion_point(field_mutable:skywire.SkywireResponse.header)
  return header_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SkywireResponse::release_header() {
  // @@protoc_insertion_point(field_release:skywire.SkywireResponse.header)
  
  return header_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SkywireResponse::set_allocated_header(std::string* header) {
  if (header != nullptr) {
    
  } else {
    
  }
  header_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), header);
  // @@protoc_insertion_point(field_set_allocated:skywire.SkywireResponse.header)
}

// string test = 130;
inline void SkywireResponse::clear_test() {
  test_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SkywireResponse::test() const {
  // @@protoc_insertion_point(field_get:skywire.SkywireResponse.test)
  return test_.GetNoArena();
}
inline void SkywireResponse::set_test(const std::string& value) {
  
  test_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:skywire.SkywireResponse.test)
}
inline void SkywireResponse::set_test(std::string&& value) {
  
  test_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:skywire.SkywireResponse.test)
}
inline void SkywireResponse::set_test(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  test_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:skywire.SkywireResponse.test)
}
inline void SkywireResponse::set_test(const char* value, size_t size) {
  
  test_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:skywire.SkywireResponse.test)
}
inline std::string* SkywireResponse::mutable_test() {
  
  // @@protoc_insertion_point(field_mutable:skywire.SkywireResponse.test)
  return test_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SkywireResponse::release_test() {
  // @@protoc_insertion_point(field_release:skywire.SkywireResponse.test)
  
  return test_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SkywireResponse::set_allocated_test(std::string* test) {
  if (test != nullptr) {
    
  } else {
    
  }
  test_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), test);
  // @@protoc_insertion_point(field_set_allocated:skywire.SkywireResponse.test)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace skywire

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_skywire_2eproto
