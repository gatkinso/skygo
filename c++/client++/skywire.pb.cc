// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skywire.proto

#include "skywire.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_skywire_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Member_skywire_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_skywire_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestMetadata_skywire_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_skywire_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Stencil_skywire_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_skywire_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Stencil_MembersEntry_DoNotUse_skywire_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_skywire_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Stencil_StringValuesEntry_DoNotUse_skywire_2eproto;
namespace skywire {
class MemberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Member> _instance;
} _Member_default_instance_;
class Stencil_StringValuesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Stencil_StringValuesEntry_DoNotUse> _instance;
} _Stencil_StringValuesEntry_DoNotUse_default_instance_;
class Stencil_MembersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Stencil_MembersEntry_DoNotUse> _instance;
} _Stencil_MembersEntry_DoNotUse_default_instance_;
class StencilDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Stencil> _instance;
} _Stencil_default_instance_;
class RequestMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestMetadata> _instance;
} _RequestMetadata_default_instance_;
class SkywireRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SkywireRequest> _instance;
} _SkywireRequest_default_instance_;
class SkywireResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SkywireResponse> _instance;
} _SkywireResponse_default_instance_;
}  // namespace skywire
static void InitDefaultsscc_info_Member_skywire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::skywire::_Member_default_instance_;
    new (ptr) ::skywire::Member();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::skywire::Member::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Member_skywire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Member_skywire_2eproto}, {}};

static void InitDefaultsscc_info_RequestMetadata_skywire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::skywire::_RequestMetadata_default_instance_;
    new (ptr) ::skywire::RequestMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::skywire::RequestMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestMetadata_skywire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RequestMetadata_skywire_2eproto}, {}};

static void InitDefaultsscc_info_SkywireRequest_skywire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::skywire::_SkywireRequest_default_instance_;
    new (ptr) ::skywire::SkywireRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::skywire::SkywireRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SkywireRequest_skywire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SkywireRequest_skywire_2eproto}, {
      &scc_info_RequestMetadata_skywire_2eproto.base,
      &scc_info_Stencil_skywire_2eproto.base,}};

static void InitDefaultsscc_info_SkywireResponse_skywire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::skywire::_SkywireResponse_default_instance_;
    new (ptr) ::skywire::SkywireResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::skywire::SkywireResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SkywireResponse_skywire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SkywireResponse_skywire_2eproto}, {
      &scc_info_RequestMetadata_skywire_2eproto.base,}};

static void InitDefaultsscc_info_Stencil_skywire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::skywire::_Stencil_default_instance_;
    new (ptr) ::skywire::Stencil();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::skywire::Stencil::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Stencil_skywire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Stencil_skywire_2eproto}, {
      &scc_info_Stencil_StringValuesEntry_DoNotUse_skywire_2eproto.base,
      &scc_info_Stencil_MembersEntry_DoNotUse_skywire_2eproto.base,}};

static void InitDefaultsscc_info_Stencil_MembersEntry_DoNotUse_skywire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::skywire::_Stencil_MembersEntry_DoNotUse_default_instance_;
    new (ptr) ::skywire::Stencil_MembersEntry_DoNotUse();
  }
  ::skywire::Stencil_MembersEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Stencil_MembersEntry_DoNotUse_skywire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Stencil_MembersEntry_DoNotUse_skywire_2eproto}, {
      &scc_info_Member_skywire_2eproto.base,}};

static void InitDefaultsscc_info_Stencil_StringValuesEntry_DoNotUse_skywire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::skywire::_Stencil_StringValuesEntry_DoNotUse_default_instance_;
    new (ptr) ::skywire::Stencil_StringValuesEntry_DoNotUse();
  }
  ::skywire::Stencil_StringValuesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Stencil_StringValuesEntry_DoNotUse_skywire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Stencil_StringValuesEntry_DoNotUse_skywire_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_skywire_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_skywire_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_skywire_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_skywire_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skywire::Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skywire::Member, type_),
  PROTOBUF_FIELD_OFFSET(::skywire::Member, name_),
  PROTOBUF_FIELD_OFFSET(::skywire::Member, endian_),
  PROTOBUF_FIELD_OFFSET(::skywire::Stencil_StringValuesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::skywire::Stencil_StringValuesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skywire::Stencil_StringValuesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::skywire::Stencil_StringValuesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::skywire::Stencil_MembersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::skywire::Stencil_MembersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skywire::Stencil_MembersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::skywire::Stencil_MembersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skywire::Stencil, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skywire::Stencil, string_values_),
  PROTOBUF_FIELD_OFFSET(::skywire::Stencil, members_),
  PROTOBUF_FIELD_OFFSET(::skywire::Stencil, includes_),
  PROTOBUF_FIELD_OFFSET(::skywire::Stencil, native_types_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skywire::RequestMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skywire::RequestMetadata, id_),
  PROTOBUF_FIELD_OFFSET(::skywire::RequestMetadata, generate_tests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skywire::SkywireRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skywire::SkywireRequest, meta_),
  PROTOBUF_FIELD_OFFSET(::skywire::SkywireRequest, msg_spec_),
  PROTOBUF_FIELD_OFFSET(::skywire::SkywireRequest, lang_spec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skywire::SkywireResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skywire::SkywireResponse, meta_),
  PROTOBUF_FIELD_OFFSET(::skywire::SkywireResponse, impl_),
  PROTOBUF_FIELD_OFFSET(::skywire::SkywireResponse, header_),
  PROTOBUF_FIELD_OFFSET(::skywire::SkywireResponse, test_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::skywire::Member)},
  { 8, 15, sizeof(::skywire::Stencil_StringValuesEntry_DoNotUse)},
  { 17, 24, sizeof(::skywire::Stencil_MembersEntry_DoNotUse)},
  { 26, -1, sizeof(::skywire::Stencil)},
  { 35, -1, sizeof(::skywire::RequestMetadata)},
  { 42, -1, sizeof(::skywire::SkywireRequest)},
  { 50, -1, sizeof(::skywire::SkywireResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skywire::_Member_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skywire::_Stencil_StringValuesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skywire::_Stencil_MembersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skywire::_Stencil_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skywire::_RequestMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skywire::_SkywireRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skywire::_SkywireResponse_default_instance_),
};

const char descriptor_table_protodef_skywire_2eproto[] =
  "\n\rskywire.proto\022\007skywire\"4\n\006Member\022\014\n\004ty"
  "pe\030\n \001(\t\022\014\n\004name\030\024 \001(\t\022\016\n\006endian\030\036 \001(\r\"\222"
  "\002\n\007Stencil\0229\n\rstring_values\030\n \003(\0132\".skyw"
  "ire.Stencil.StringValuesEntry\022.\n\007members"
  "\030( \003(\0132\035.skywire.Stencil.MembersEntry\022\020\n"
  "\010includes\030d \003(\t\022\024\n\014native_types\030e \003(\t\0323\n"
  "\021StringValuesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
  "\030\002 \001(\t:\0028\001\032\?\n\014MembersEntry\022\013\n\003key\030\001 \001(\r\022"
  "\036\n\005value\030\002 \001(\0132\017.skywire.Member:\0028\001\"5\n\017R"
  "equestMetadata\022\n\n\002id\030\n \001(\004\022\026\n\016generate_t"
  "ests\030\024 \001(\010\"\201\001\n\016SkywireRequest\022&\n\004meta\030\n "
  "\001(\0132\030.skywire.RequestMetadata\022\"\n\010msg_spe"
  "c\030d \001(\0132\020.skywire.Stencil\022#\n\tlang_spec\030n"
  " \001(\0132\020.skywire.Stencil\"f\n\017SkywireRespons"
  "e\022&\n\004meta\030\n \001(\0132\030.skywire.RequestMetadat"
  "a\022\014\n\004impl\030d \001(\t\022\016\n\006header\030x \001(\t\022\r\n\004test\030"
  "\202\001 \001(\t2J\n\007Skywire\022\?\n\010Generate\022\027.skywire."
  "SkywireRequest\032\030.skywire.SkywireResponse"
  "\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_skywire_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_skywire_2eproto_sccs[7] = {
  &scc_info_Member_skywire_2eproto.base,
  &scc_info_RequestMetadata_skywire_2eproto.base,
  &scc_info_SkywireRequest_skywire_2eproto.base,
  &scc_info_SkywireResponse_skywire_2eproto.base,
  &scc_info_Stencil_skywire_2eproto.base,
  &scc_info_Stencil_MembersEntry_DoNotUse_skywire_2eproto.base,
  &scc_info_Stencil_StringValuesEntry_DoNotUse_skywire_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_skywire_2eproto_once;
static bool descriptor_table_skywire_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skywire_2eproto = {
  &descriptor_table_skywire_2eproto_initialized, descriptor_table_protodef_skywire_2eproto, "skywire.proto", 730,
  &descriptor_table_skywire_2eproto_once, descriptor_table_skywire_2eproto_sccs, descriptor_table_skywire_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_skywire_2eproto::offsets,
  file_level_metadata_skywire_2eproto, 7, file_level_enum_descriptors_skywire_2eproto, file_level_service_descriptors_skywire_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_skywire_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_skywire_2eproto), true);
namespace skywire {

// ===================================================================

void Member::InitAsDefaultInstance() {
}
class Member::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Member::kTypeFieldNumber;
const int Member::kNameFieldNumber;
const int Member::kEndianFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Member::Member()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:skywire.Member)
}
Member::Member(const Member& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  endian_ = from.endian_;
  // @@protoc_insertion_point(copy_constructor:skywire.Member)
}

void Member::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Member_skywire_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  endian_ = 0u;
}

Member::~Member() {
  // @@protoc_insertion_point(destructor:skywire.Member)
  SharedDtor();
}

void Member::SharedDtor() {
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Member::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Member& Member::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Member_skywire_2eproto.base);
  return *internal_default_instance();
}


void Member::Clear() {
// @@protoc_insertion_point(message_clear_start:skywire.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  endian_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Member::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_type(), ptr, ctx, "skywire.Member.type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "skywire.Member.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 endian = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          endian_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Member::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:skywire.Member)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string type = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "skywire.Member.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "skywire.Member.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 endian = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (240 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endian_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:skywire.Member)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:skywire.Member)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Member::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:skywire.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 10;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skywire.Member.type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->type(), output);
  }

  // string name = 20;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skywire.Member.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->name(), output);
  }

  // uint32 endian = 30;
  if (this->endian() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(30, this->endian(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:skywire.Member)
}

::PROTOBUF_NAMESPACE_ID::uint8* Member::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:skywire.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 10;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skywire.Member.type");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        10, this->type(), target);
  }

  // string name = 20;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skywire.Member.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        20, this->name(), target);
  }

  // uint32 endian = 30;
  if (this->endian() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->endian(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skywire.Member)
  return target;
}

size_t Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skywire.Member)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 10;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->type());
  }

  // string name = 20;
  if (this->name().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // uint32 endian = 30;
  if (this->endian() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->endian());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Member::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skywire.Member)
  GOOGLE_DCHECK_NE(&from, this);
  const Member* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Member>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skywire.Member)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skywire.Member)
    MergeFrom(*source);
  }
}

void Member::MergeFrom(const Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skywire.Member)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.endian() != 0) {
    set_endian(from.endian());
  }
}

void Member::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skywire.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Member::CopyFrom(const Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skywire.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Member::IsInitialized() const {
  return true;
}

void Member::Swap(Member* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Member::InternalSwap(Member* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(endian_, other->endian_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Member::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Stencil_StringValuesEntry_DoNotUse::Stencil_StringValuesEntry_DoNotUse() {}
Stencil_StringValuesEntry_DoNotUse::Stencil_StringValuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Stencil_StringValuesEntry_DoNotUse::MergeFrom(const Stencil_StringValuesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Stencil_StringValuesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Stencil_StringValuesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Stencil_MembersEntry_DoNotUse::Stencil_MembersEntry_DoNotUse() {}
Stencil_MembersEntry_DoNotUse::Stencil_MembersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Stencil_MembersEntry_DoNotUse::MergeFrom(const Stencil_MembersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Stencil_MembersEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Stencil_MembersEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Stencil::InitAsDefaultInstance() {
}
class Stencil::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Stencil::kStringValuesFieldNumber;
const int Stencil::kMembersFieldNumber;
const int Stencil::kIncludesFieldNumber;
const int Stencil::kNativeTypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Stencil::Stencil()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:skywire.Stencil)
}
Stencil::Stencil(const Stencil& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      includes_(from.includes_),
      native_types_(from.native_types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  string_values_.MergeFrom(from.string_values_);
  members_.MergeFrom(from.members_);
  // @@protoc_insertion_point(copy_constructor:skywire.Stencil)
}

void Stencil::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Stencil_skywire_2eproto.base);
}

Stencil::~Stencil() {
  // @@protoc_insertion_point(destructor:skywire.Stencil)
  SharedDtor();
}

void Stencil::SharedDtor() {
}

void Stencil::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Stencil& Stencil::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Stencil_skywire_2eproto.base);
  return *internal_default_instance();
}


void Stencil::Clear() {
// @@protoc_insertion_point(message_clear_start:skywire.Stencil)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  string_values_.Clear();
  members_.Clear();
  includes_.Clear();
  native_types_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Stencil::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, string> string_values = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&string_values_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 82);
        } else goto handle_unusual;
        continue;
      // map<uint32, .skywire.Member> members = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&members_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 706);
        } else goto handle_unusual;
        continue;
      // repeated string includes = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_includes(), ptr, ctx, "skywire.Stencil.includes");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 1698);
        } else goto handle_unusual;
        continue;
      // repeated string native_types = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_native_types(), ptr, ctx, "skywire.Stencil.native_types");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 1706);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Stencil::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:skywire.Stencil)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, string> string_values = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          Stencil_StringValuesEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              Stencil_StringValuesEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&string_values_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "skywire.Stencil.StringValuesEntry.key"));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "skywire.Stencil.StringValuesEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, .skywire.Member> members = 40;
      case 40: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (322 & 0xFF)) {
          Stencil_MembersEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              Stencil_MembersEntry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::uint32, ::skywire::Member,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::skywire::Member > > parser(&members_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string includes = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_includes()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->includes(this->includes_size() - 1).data(),
            static_cast<int>(this->includes(this->includes_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "skywire.Stencil.includes"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string native_types = 101;
      case 101: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (810 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_native_types()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->native_types(this->native_types_size() - 1).data(),
            static_cast<int>(this->native_types(this->native_types_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "skywire.Stencil.native_types"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:skywire.Stencil)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:skywire.Stencil)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Stencil::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:skywire.Stencil)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> string_values = 10;
  if (!this->string_values().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "skywire.Stencil.StringValuesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "skywire.Stencil.StringValuesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->string_values().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->string_values().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->string_values().begin();
          it != this->string_values().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        Stencil_StringValuesEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(10, entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->string_values().begin();
          it != this->string_values().end(); ++it) {
        Stencil_StringValuesEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(10, entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<uint32, .skywire.Member> members = 40;
  if (!this->members().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::skywire::Member >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->members().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->members().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::skywire::Member >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::skywire::Member >::const_iterator
          it = this->members().begin();
          it != this->members().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        Stencil_MembersEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(40, entry, output);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::skywire::Member >::const_iterator
          it = this->members().begin();
          it != this->members().end(); ++it) {
        Stencil_MembersEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(40, entry, output);
      }
    }
  }

  // repeated string includes = 100;
  for (int i = 0, n = this->includes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->includes(i).data(), static_cast<int>(this->includes(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skywire.Stencil.includes");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      100, this->includes(i), output);
  }

  // repeated string native_types = 101;
  for (int i = 0, n = this->native_types_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->native_types(i).data(), static_cast<int>(this->native_types(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skywire.Stencil.native_types");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      101, this->native_types(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:skywire.Stencil)
}

::PROTOBUF_NAMESPACE_ID::uint8* Stencil::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:skywire.Stencil)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> string_values = 10;
  if (!this->string_values().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "skywire.Stencil.StringValuesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "skywire.Stencil.StringValuesEntry.value");
      }
    };

    if (false &&
        this->string_values().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->string_values().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->string_values().begin();
          it != this->string_values().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        Stencil_StringValuesEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(10, entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->string_values().begin();
          it != this->string_values().end(); ++it) {
        Stencil_StringValuesEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(10, entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<uint32, .skywire.Member> members = 40;
  if (!this->members().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::skywire::Member >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->members().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->members().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::skywire::Member >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::skywire::Member >::const_iterator
          it = this->members().begin();
          it != this->members().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        Stencil_MembersEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(40, entry, target);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::skywire::Member >::const_iterator
          it = this->members().begin();
          it != this->members().end(); ++it) {
        Stencil_MembersEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(40, entry, target);
      }
    }
  }

  // repeated string includes = 100;
  for (int i = 0, n = this->includes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->includes(i).data(), static_cast<int>(this->includes(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skywire.Stencil.includes");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(100, this->includes(i), target);
  }

  // repeated string native_types = 101;
  for (int i = 0, n = this->native_types_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->native_types(i).data(), static_cast<int>(this->native_types(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skywire.Stencil.native_types");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(101, this->native_types(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skywire.Stencil)
  return target;
}

size_t Stencil::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skywire.Stencil)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> string_values = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->string_values_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->string_values().begin();
      it != this->string_values().end(); ++it) {
    Stencil_StringValuesEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        MessageSizeNoVirtual(entry);
  }

  // map<uint32, .skywire.Member> members = 40;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->members_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::skywire::Member >::const_iterator
      it = this->members().begin();
      it != this->members().end(); ++it) {
    Stencil_MembersEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        MessageSizeNoVirtual(entry);
  }

  // repeated string includes = 100;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->includes_size());
  for (int i = 0, n = this->includes_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->includes(i));
  }

  // repeated string native_types = 101;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->native_types_size());
  for (int i = 0, n = this->native_types_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->native_types(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stencil::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skywire.Stencil)
  GOOGLE_DCHECK_NE(&from, this);
  const Stencil* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Stencil>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skywire.Stencil)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skywire.Stencil)
    MergeFrom(*source);
  }
}

void Stencil::MergeFrom(const Stencil& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skywire.Stencil)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  string_values_.MergeFrom(from.string_values_);
  members_.MergeFrom(from.members_);
  includes_.MergeFrom(from.includes_);
  native_types_.MergeFrom(from.native_types_);
}

void Stencil::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skywire.Stencil)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stencil::CopyFrom(const Stencil& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skywire.Stencil)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stencil::IsInitialized() const {
  return true;
}

void Stencil::Swap(Stencil* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stencil::InternalSwap(Stencil* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  string_values_.Swap(&other->string_values_);
  members_.Swap(&other->members_);
  includes_.InternalSwap(CastToBase(&other->includes_));
  native_types_.InternalSwap(CastToBase(&other->native_types_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Stencil::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestMetadata::InitAsDefaultInstance() {
}
class RequestMetadata::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestMetadata::kIdFieldNumber;
const int RequestMetadata::kGenerateTestsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestMetadata::RequestMetadata()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:skywire.RequestMetadata)
}
RequestMetadata::RequestMetadata(const RequestMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&generate_tests_, &from.generate_tests_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&generate_tests_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:skywire.RequestMetadata)
}

void RequestMetadata::SharedCtor() {
  ::memset(&generate_tests_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&generate_tests_)) + sizeof(id_));
}

RequestMetadata::~RequestMetadata() {
  // @@protoc_insertion_point(destructor:skywire.RequestMetadata)
  SharedDtor();
}

void RequestMetadata::SharedDtor() {
}

void RequestMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestMetadata& RequestMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestMetadata_skywire_2eproto.base);
  return *internal_default_instance();
}


void RequestMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:skywire.RequestMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&generate_tests_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&generate_tests_)) + sizeof(id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RequestMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool generate_tests = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          generate_tests_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RequestMetadata::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:skywire.RequestMetadata)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 id = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool generate_tests = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &generate_tests_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:skywire.RequestMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:skywire.RequestMetadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RequestMetadata::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:skywire.RequestMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 10;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(10, this->id(), output);
  }

  // bool generate_tests = 20;
  if (this->generate_tests() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(20, this->generate_tests(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:skywire.RequestMetadata)
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestMetadata::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:skywire.RequestMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 10;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->id(), target);
  }

  // bool generate_tests = 20;
  if (this->generate_tests() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->generate_tests(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skywire.RequestMetadata)
  return target;
}

size_t RequestMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skywire.RequestMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool generate_tests = 20;
  if (this->generate_tests() != 0) {
    total_size += 2 + 1;
  }

  // uint64 id = 10;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skywire.RequestMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skywire.RequestMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skywire.RequestMetadata)
    MergeFrom(*source);
  }
}

void RequestMetadata::MergeFrom(const RequestMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skywire.RequestMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.generate_tests() != 0) {
    set_generate_tests(from.generate_tests());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void RequestMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skywire.RequestMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestMetadata::CopyFrom(const RequestMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skywire.RequestMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestMetadata::IsInitialized() const {
  return true;
}

void RequestMetadata::Swap(RequestMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestMetadata::InternalSwap(RequestMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(generate_tests_, other->generate_tests_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SkywireRequest::InitAsDefaultInstance() {
  ::skywire::_SkywireRequest_default_instance_._instance.get_mutable()->meta_ = const_cast< ::skywire::RequestMetadata*>(
      ::skywire::RequestMetadata::internal_default_instance());
  ::skywire::_SkywireRequest_default_instance_._instance.get_mutable()->msg_spec_ = const_cast< ::skywire::Stencil*>(
      ::skywire::Stencil::internal_default_instance());
  ::skywire::_SkywireRequest_default_instance_._instance.get_mutable()->lang_spec_ = const_cast< ::skywire::Stencil*>(
      ::skywire::Stencil::internal_default_instance());
}
class SkywireRequest::HasBitSetters {
 public:
  static const ::skywire::RequestMetadata& meta(const SkywireRequest* msg);
  static const ::skywire::Stencil& msg_spec(const SkywireRequest* msg);
  static const ::skywire::Stencil& lang_spec(const SkywireRequest* msg);
};

const ::skywire::RequestMetadata&
SkywireRequest::HasBitSetters::meta(const SkywireRequest* msg) {
  return *msg->meta_;
}
const ::skywire::Stencil&
SkywireRequest::HasBitSetters::msg_spec(const SkywireRequest* msg) {
  return *msg->msg_spec_;
}
const ::skywire::Stencil&
SkywireRequest::HasBitSetters::lang_spec(const SkywireRequest* msg) {
  return *msg->lang_spec_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SkywireRequest::kMetaFieldNumber;
const int SkywireRequest::kMsgSpecFieldNumber;
const int SkywireRequest::kLangSpecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SkywireRequest::SkywireRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:skywire.SkywireRequest)
}
SkywireRequest::SkywireRequest(const SkywireRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_meta()) {
    meta_ = new ::skywire::RequestMetadata(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  if (from.has_msg_spec()) {
    msg_spec_ = new ::skywire::Stencil(*from.msg_spec_);
  } else {
    msg_spec_ = nullptr;
  }
  if (from.has_lang_spec()) {
    lang_spec_ = new ::skywire::Stencil(*from.lang_spec_);
  } else {
    lang_spec_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:skywire.SkywireRequest)
}

void SkywireRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SkywireRequest_skywire_2eproto.base);
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lang_spec_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(lang_spec_));
}

SkywireRequest::~SkywireRequest() {
  // @@protoc_insertion_point(destructor:skywire.SkywireRequest)
  SharedDtor();
}

void SkywireRequest::SharedDtor() {
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete msg_spec_;
  if (this != internal_default_instance()) delete lang_spec_;
}

void SkywireRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SkywireRequest& SkywireRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SkywireRequest_skywire_2eproto.base);
  return *internal_default_instance();
}


void SkywireRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:skywire.SkywireRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_spec_ != nullptr) {
    delete msg_spec_;
  }
  msg_spec_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && lang_spec_ != nullptr) {
    delete lang_spec_;
  }
  lang_spec_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SkywireRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .skywire.RequestMetadata meta = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .skywire.Stencil msg_spec = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_msg_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .skywire.Stencil lang_spec = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_lang_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SkywireRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:skywire.SkywireRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .skywire.RequestMetadata meta = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .skywire.Stencil msg_spec = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_msg_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .skywire.Stencil lang_spec = 110;
      case 110: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (882 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_lang_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:skywire.SkywireRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:skywire.SkywireRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SkywireRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:skywire.SkywireRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .skywire.RequestMetadata meta = 10;
  if (this->has_meta()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::meta(this), output);
  }

  // .skywire.Stencil msg_spec = 100;
  if (this->has_msg_spec()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, HasBitSetters::msg_spec(this), output);
  }

  // .skywire.Stencil lang_spec = 110;
  if (this->has_lang_spec()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      110, HasBitSetters::lang_spec(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:skywire.SkywireRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* SkywireRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:skywire.SkywireRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .skywire.RequestMetadata meta = 10;
  if (this->has_meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::meta(this), target);
  }

  // .skywire.Stencil msg_spec = 100;
  if (this->has_msg_spec()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, HasBitSetters::msg_spec(this), target);
  }

  // .skywire.Stencil lang_spec = 110;
  if (this->has_lang_spec()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        110, HasBitSetters::lang_spec(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skywire.SkywireRequest)
  return target;
}

size_t SkywireRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skywire.SkywireRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .skywire.RequestMetadata meta = 10;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // .skywire.Stencil msg_spec = 100;
  if (this->has_msg_spec()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_spec_);
  }

  // .skywire.Stencil lang_spec = 110;
  if (this->has_lang_spec()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lang_spec_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SkywireRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skywire.SkywireRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SkywireRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SkywireRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skywire.SkywireRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skywire.SkywireRequest)
    MergeFrom(*source);
  }
}

void SkywireRequest::MergeFrom(const SkywireRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skywire.SkywireRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_meta()) {
    mutable_meta()->::skywire::RequestMetadata::MergeFrom(from.meta());
  }
  if (from.has_msg_spec()) {
    mutable_msg_spec()->::skywire::Stencil::MergeFrom(from.msg_spec());
  }
  if (from.has_lang_spec()) {
    mutable_lang_spec()->::skywire::Stencil::MergeFrom(from.lang_spec());
  }
}

void SkywireRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skywire.SkywireRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkywireRequest::CopyFrom(const SkywireRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skywire.SkywireRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkywireRequest::IsInitialized() const {
  return true;
}

void SkywireRequest::Swap(SkywireRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SkywireRequest::InternalSwap(SkywireRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(meta_, other->meta_);
  swap(msg_spec_, other->msg_spec_);
  swap(lang_spec_, other->lang_spec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SkywireRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SkywireResponse::InitAsDefaultInstance() {
  ::skywire::_SkywireResponse_default_instance_._instance.get_mutable()->meta_ = const_cast< ::skywire::RequestMetadata*>(
      ::skywire::RequestMetadata::internal_default_instance());
}
class SkywireResponse::HasBitSetters {
 public:
  static const ::skywire::RequestMetadata& meta(const SkywireResponse* msg);
};

const ::skywire::RequestMetadata&
SkywireResponse::HasBitSetters::meta(const SkywireResponse* msg) {
  return *msg->meta_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SkywireResponse::kMetaFieldNumber;
const int SkywireResponse::kImplFieldNumber;
const int SkywireResponse::kHeaderFieldNumber;
const int SkywireResponse::kTestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SkywireResponse::SkywireResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:skywire.SkywireResponse)
}
SkywireResponse::SkywireResponse(const SkywireResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  impl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.impl().size() > 0) {
    impl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.impl_);
  }
  header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.header().size() > 0) {
    header_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.header_);
  }
  test_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.test().size() > 0) {
    test_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.test_);
  }
  if (from.has_meta()) {
    meta_ = new ::skywire::RequestMetadata(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:skywire.SkywireResponse)
}

void SkywireResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SkywireResponse_skywire_2eproto.base);
  impl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  test_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  meta_ = nullptr;
}

SkywireResponse::~SkywireResponse() {
  // @@protoc_insertion_point(destructor:skywire.SkywireResponse)
  SharedDtor();
}

void SkywireResponse::SharedDtor() {
  impl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  header_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  test_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete meta_;
}

void SkywireResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SkywireResponse& SkywireResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SkywireResponse_skywire_2eproto.base);
  return *internal_default_instance();
}


void SkywireResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:skywire.SkywireResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  impl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  header_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  test_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SkywireResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .skywire.RequestMetadata meta = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string impl = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_impl(), ptr, ctx, "skywire.SkywireResponse.impl");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string header = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_header(), ptr, ctx, "skywire.SkywireResponse.header");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string test = 130;
      case 130:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_test(), ptr, ctx, "skywire.SkywireResponse.test");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SkywireResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:skywire.SkywireResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .skywire.RequestMetadata meta = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string impl = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_impl()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->impl().data(), static_cast<int>(this->impl().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "skywire.SkywireResponse.impl"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string header = 120;
      case 120: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (962 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_header()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->header().data(), static_cast<int>(this->header().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "skywire.SkywireResponse.header"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string test = 130;
      case 130: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1042 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_test()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->test().data(), static_cast<int>(this->test().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "skywire.SkywireResponse.test"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:skywire.SkywireResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:skywire.SkywireResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SkywireResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:skywire.SkywireResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .skywire.RequestMetadata meta = 10;
  if (this->has_meta()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::meta(this), output);
  }

  // string impl = 100;
  if (this->impl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->impl().data(), static_cast<int>(this->impl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skywire.SkywireResponse.impl");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->impl(), output);
  }

  // string header = 120;
  if (this->header().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->header().data(), static_cast<int>(this->header().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skywire.SkywireResponse.header");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      120, this->header(), output);
  }

  // string test = 130;
  if (this->test().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->test().data(), static_cast<int>(this->test().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skywire.SkywireResponse.test");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      130, this->test(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:skywire.SkywireResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* SkywireResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:skywire.SkywireResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .skywire.RequestMetadata meta = 10;
  if (this->has_meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::meta(this), target);
  }

  // string impl = 100;
  if (this->impl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->impl().data(), static_cast<int>(this->impl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skywire.SkywireResponse.impl");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->impl(), target);
  }

  // string header = 120;
  if (this->header().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->header().data(), static_cast<int>(this->header().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skywire.SkywireResponse.header");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        120, this->header(), target);
  }

  // string test = 130;
  if (this->test().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->test().data(), static_cast<int>(this->test().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skywire.SkywireResponse.test");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        130, this->test(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skywire.SkywireResponse)
  return target;
}

size_t SkywireResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skywire.SkywireResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string impl = 100;
  if (this->impl().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->impl());
  }

  // string header = 120;
  if (this->header().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->header());
  }

  // string test = 130;
  if (this->test().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->test());
  }

  // .skywire.RequestMetadata meta = 10;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SkywireResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skywire.SkywireResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SkywireResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SkywireResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skywire.SkywireResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skywire.SkywireResponse)
    MergeFrom(*source);
  }
}

void SkywireResponse::MergeFrom(const SkywireResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skywire.SkywireResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.impl().size() > 0) {

    impl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.impl_);
  }
  if (from.header().size() > 0) {

    header_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.header_);
  }
  if (from.test().size() > 0) {

    test_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.test_);
  }
  if (from.has_meta()) {
    mutable_meta()->::skywire::RequestMetadata::MergeFrom(from.meta());
  }
}

void SkywireResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skywire.SkywireResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkywireResponse::CopyFrom(const SkywireResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skywire.SkywireResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkywireResponse::IsInitialized() const {
  return true;
}

void SkywireResponse::Swap(SkywireResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SkywireResponse::InternalSwap(SkywireResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  impl_.Swap(&other->impl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  header_.Swap(&other->header_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  test_.Swap(&other->test_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(meta_, other->meta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SkywireResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace skywire
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::skywire::Member* Arena::CreateMaybeMessage< ::skywire::Member >(Arena* arena) {
  return Arena::CreateInternal< ::skywire::Member >(arena);
}
template<> PROTOBUF_NOINLINE ::skywire::Stencil_StringValuesEntry_DoNotUse* Arena::CreateMaybeMessage< ::skywire::Stencil_StringValuesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::skywire::Stencil_StringValuesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::skywire::Stencil_MembersEntry_DoNotUse* Arena::CreateMaybeMessage< ::skywire::Stencil_MembersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::skywire::Stencil_MembersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::skywire::Stencil* Arena::CreateMaybeMessage< ::skywire::Stencil >(Arena* arena) {
  return Arena::CreateInternal< ::skywire::Stencil >(arena);
}
template<> PROTOBUF_NOINLINE ::skywire::RequestMetadata* Arena::CreateMaybeMessage< ::skywire::RequestMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::skywire::RequestMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::skywire::SkywireRequest* Arena::CreateMaybeMessage< ::skywire::SkywireRequest >(Arena* arena) {
  return Arena::CreateInternal< ::skywire::SkywireRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::skywire::SkywireResponse* Arena::CreateMaybeMessage< ::skywire::SkywireResponse >(Arena* arena) {
  return Arena::CreateInternal< ::skywire::SkywireResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
